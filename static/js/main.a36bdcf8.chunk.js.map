{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Values.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedTodo","selectTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","selectedValue","onSelection","query","onQuery","value","onChange","event","values","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Values","TodoModal","onCloseModal","useState","user","setUser","loadingModal","setLoadingModal","useEffect","a","userId","userFound","href","email","name","App","setTodos","loading","setLoading","setSelectedTodo","All","setSelect","setQuery","todosLoaded","includesQuery","text","toLowerCase","includes","visibleTodos","useMemo","filter","Completed","Active","option","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a36bdcf8.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  selectTodo: (todo: Todo | null) => void\n}\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    selectedTodo,\n    selectTodo,\n  }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map((todo) => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(\n                  todo.completed ? 'has-text-success' : 'has-text-danger',\n                )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selectedTodo?.id === todo.id ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button is-success\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectTodo(null);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n);\n","import { Values } from '../../types/Values';\n\ninterface Props {\n  selectedValue: string;\n  onSelection: (option:Values) => void;\n  query:string;\n  onQuery: (text:string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedValue,\n  onSelection,\n  query,\n  onQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          value={selectedValue}\n          onChange={(event) => {\n            const values = event.target.value;\n\n            onSelection(values as Values);\n          }}\n          data-cy=\"statusSelect\"\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        value={query}\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        onChange={(event) => onQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            onClick={() => onQuery('')}\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Values{\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo;\n  onCloseModal: (todo: Todo | null) => void;\n}\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onCloseModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loadingModal, setLoadingModal] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      const userFound = await getUser(selectedTodo.userId);\n\n      setUser(userFound);\n      setLoadingModal(false);\n    })();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {loadingModal ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={() => onCloseModal(null)}\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Values } from './types/Values';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedValue, setSelect] = useState(Values.All);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      const todosLoaded = await getTodos();\n\n      setLoading(false);\n      setTodos(todosLoaded);\n    })();\n  }, []);\n\n  const includesQuery = (text:string) => {\n    return text.toLowerCase().includes(query.toLowerCase());\n  };\n\n  const getVisibleTodos = () => {\n    return [...todos].filter((todo) => {\n      switch (selectedValue) {\n        case Values.Completed:\n          return todo.completed && includesQuery(todo.title);\n        case Values.Active:\n          return !todo.completed && includesQuery(todo.title);\n        default:\n          return includesQuery(todo.title);\n      }\n    });\n  };\n\n  const visibleTodos = useMemo(\n    getVisibleTodos,\n    [query, selectedValue, todos],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedValue={selectedValue}\n                onSelection={(option: Values) => setSelect(option)}\n                query={query}\n                onQuery={(text: string) => setQuery(text)}\n              />\n            </div>\n\n            <React.StrictMode>\n              <div className=\"block\">\n                {loading && <Loader />}\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  selectTodo={(todo: Todo | null) => setSelectedTodo(todo)}\n                />\n              </div>\n            </React.StrictMode>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onCloseModal={(todo: Todo | null) => setSelectedTodo(todo)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}